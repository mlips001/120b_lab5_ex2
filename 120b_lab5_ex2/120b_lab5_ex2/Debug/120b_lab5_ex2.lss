
120b_lab5_ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ba  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037c  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a4 d0       	rcall	.+328    	; 0x1f2 <main>
  aa:	b2 c0       	rjmp	.+356    	; 0x210 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <button_Press>:

unsigned char tempC;


void button_Press(){
	button0 = ~PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	28 2f       	mov	r18, r24
  b4:	21 70       	andi	r18, 0x01	; 1
  b6:	80 fd       	sbrc	r24, 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <button0>
	button1 = ~PINA & 0x02;
  be:	80 b1       	in	r24, 0x00	; 0
  c0:	80 95       	com	r24
  c2:	82 70       	andi	r24, 0x02	; 2
  c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <button1>

	switch(state){ // Transitions
  c8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	92 30       	cpi	r25, 0x02	; 2
  ce:	71 f1       	breq	.+92     	; 0x12c <button_Press+0x7e>
  d0:	28 f4       	brcc	.+10     	; 0xdc <button_Press+0x2e>
  d2:	99 23       	and	r25, r25
  d4:	59 f0       	breq	.+22     	; 0xec <button_Press+0x3e>
  d6:	91 30       	cpi	r25, 0x01	; 1
  d8:	e9 f0       	breq	.+58     	; 0x114 <button_Press+0x66>
  da:	66 c0       	rjmp	.+204    	; 0x1a8 <button_Press+0xfa>
  dc:	94 30       	cpi	r25, 0x04	; 4
  de:	09 f4       	brne	.+2      	; 0xe2 <button_Press+0x34>
  e0:	41 c0       	rjmp	.+130    	; 0x164 <button_Press+0xb6>
  e2:	80 f1       	brcs	.+96     	; 0x144 <button_Press+0x96>
  e4:	95 30       	cpi	r25, 0x05	; 5
  e6:	09 f4       	brne	.+2      	; 0xea <button_Press+0x3c>
  e8:	51 c0       	rjmp	.+162    	; 0x18c <button_Press+0xde>
  ea:	5e c0       	rjmp	.+188    	; 0x1a8 <button_Press+0xfa>
		case init:
			if(!button0 && !button1){
  ec:	22 23       	and	r18, r18
  ee:	21 f0       	breq	.+8      	; 0xf8 <button_Press+0x4a>
  f0:	88 23       	and	r24, r24
  f2:	09 f4       	brne	.+2      	; 0xf6 <button_Press+0x48>
  f4:	7d c0       	rjmp	.+250    	; 0x1f0 <button_Press+0x142>
  f6:	06 c0       	rjmp	.+12     	; 0x104 <button_Press+0x56>
				state = init;
			}
			else if(button0 && !button1){
  f8:	81 11       	cpse	r24, r1
  fa:	6f c0       	rjmp	.+222    	; 0x1da <button_Press+0x12c>
				state = inc;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	58 c0       	rjmp	.+176    	; 0x1b4 <button_Press+0x106>
			}
			else if(!button0 && button1){
				state = dec;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 10a:	5c c0       	rjmp	.+184    	; 0x1c4 <button_Press+0x116>
			}
			else if(button0 && button1){
				state = zero;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	60 c0       	rjmp	.+192    	; 0x1d4 <button_Press+0x126>
			}
			break;
			
		case inc:
			if(button0 && button1){
 114:	21 11       	cpse	r18, r1
 116:	06 c0       	rjmp	.+12     	; 0x124 <button_Press+0x76>
 118:	88 23       	and	r24, r24
 11a:	21 f0       	breq	.+8      	; 0x124 <button_Press+0x76>
				state = zero;
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	58 c0       	rjmp	.+176    	; 0x1d4 <button_Press+0x126>
			}
			else{
				state = wait2;
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	08 95       	ret
			}
			break;
			
		case dec:
			if(button0 && button1){
 12c:	21 11       	cpse	r18, r1
 12e:	06 c0       	rjmp	.+12     	; 0x13c <button_Press+0x8e>
 130:	88 23       	and	r24, r24
 132:	21 f0       	breq	.+8      	; 0x13c <button_Press+0x8e>
				state = zero;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	4c c0       	rjmp	.+152    	; 0x1d4 <button_Press+0x126>
			}
			else{
				state = wait2;
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	08 95       	ret
			}
			break;
			
		case zero:
			if(!button0 && !button1){
 144:	22 23       	and	r18, r18
 146:	09 f4       	brne	.+2      	; 0x14a <button_Press+0x9c>
 148:	4f c0       	rjmp	.+158    	; 0x1e8 <button_Press+0x13a>
 14a:	81 11       	cpse	r24, r1
 14c:	07 c0       	rjmp	.+14     	; 0x15c <button_Press+0xae>
				state = init;
 14e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	08 95       	ret
			}
			else if (button0 && !button1){
				state = inc;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	2c c0       	rjmp	.+88     	; 0x1b4 <button_Press+0x106>
			}
			else if(!button0 && button1){
				state = dec;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	30 c0       	rjmp	.+96     	; 0x1c4 <button_Press+0x116>
				state = zero;
			}
				break;
				
		case wait:
			if(button0 && button1){
 164:	21 11       	cpse	r18, r1
 166:	0a c0       	rjmp	.+20     	; 0x17c <button_Press+0xce>
 168:	88 23       	and	r24, r24
 16a:	21 f0       	breq	.+8      	; 0x174 <button_Press+0xc6>
				state = zero;
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	30 c0       	rjmp	.+96     	; 0x1d4 <button_Press+0x126>
			}
			else if(button0 && !button1){
				state = inc;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	1c c0       	rjmp	.+56     	; 0x1b4 <button_Press+0x106>
			}
			else if(!button0 && button1){
 17c:	22 23       	and	r18, r18
 17e:	c1 f1       	breq	.+112    	; 0x1f0 <button_Press+0x142>
 180:	88 23       	and	r24, r24
 182:	b1 f1       	breq	.+108    	; 0x1f0 <button_Press+0x142>
				state = dec;
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	1c c0       	rjmp	.+56     	; 0x1c4 <button_Press+0x116>
			else{
				state = wait;
			}
			break;
		case wait2:
			if(!button0 && !button1){
 18c:	22 23       	and	r18, r18
 18e:	31 f0       	breq	.+12     	; 0x19c <button_Press+0xee>
 190:	81 11       	cpse	r24, r1
 192:	27 c0       	rjmp	.+78     	; 0x1e2 <button_Press+0x134>
				state = wait;
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	08 95       	ret
			}
			else if(button0 && button1){
 19c:	88 23       	and	r24, r24
 19e:	41 f1       	breq	.+80     	; 0x1f0 <button_Press+0x142>
				state = zero;
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	16 c0       	rjmp	.+44     	; 0x1d4 <button_Press+0x126>
				state = wait2;
			}
			break;
	}
	
	switch(state){ 
 1a8:	92 30       	cpi	r25, 0x02	; 2
 1aa:	61 f0       	breq	.+24     	; 0x1c4 <button_Press+0x116>
 1ac:	93 30       	cpi	r25, 0x03	; 3
 1ae:	91 f0       	breq	.+36     	; 0x1d4 <button_Press+0x126>
 1b0:	91 30       	cpi	r25, 0x01	; 1
 1b2:	f1 f4       	brne	.+60     	; 0x1f0 <button_Press+0x142>
		case init:
			break;
			
		case inc:
			if(tempC < 9){
 1b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempC>
 1b8:	89 30       	cpi	r24, 0x09	; 9
 1ba:	d0 f4       	brcc	.+52     	; 0x1f0 <button_Press+0x142>
				tempC = tempC + 1;
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempC>
 1c2:	08 95       	ret
			}
			break;
			
		case dec:
			if(tempC > 0){
 1c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempC>
 1c8:	88 23       	and	r24, r24
 1ca:	91 f0       	breq	.+36     	; 0x1f0 <button_Press+0x142>
				tempC = tempC - 1;
 1cc:	81 50       	subi	r24, 0x01	; 1
 1ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempC>
 1d2:	08 95       	ret
			}
			break;
			
		case zero:
			tempC = 0;
 1d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tempC>
			break;
			
		case wait2:
			break;
	}
}
 1d8:	08 95       	ret
				state = init;
			}
			else if(button0 && !button1){
				state = inc;
			}
			else if(!button0 && button1){
 1da:	22 23       	and	r18, r18
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <button_Press+0x132>
 1de:	96 cf       	rjmp	.-212    	; 0x10c <button_Press+0x5e>
 1e0:	91 cf       	rjmp	.-222    	; 0x104 <button_Press+0x56>
			break;
		case wait2:
			if(!button0 && !button1){
				state = wait;
			}
			else if(button0 && button1){
 1e2:	22 23       	and	r18, r18
 1e4:	e9 f2       	breq	.-70     	; 0x1a0 <button_Press+0xf2>
 1e6:	08 95       	ret
			
		case zero:
			if(!button0 && !button1){
				state = init;
			}
			else if (button0 && !button1){
 1e8:	88 23       	and	r24, r24
 1ea:	09 f4       	brne	.+2      	; 0x1ee <button_Press+0x140>
 1ec:	b3 cf       	rjmp	.-154    	; 0x154 <button_Press+0xa6>
 1ee:	f2 cf       	rjmp	.-28     	; 0x1d4 <button_Press+0x126>
 1f0:	08 95       	ret

000001f2 <main>:
}


int main(void)
{	
	DDRA = 0x00; PORTA = 0xFF; 
 1f2:	11 b8       	out	0x01, r1	; 1
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; 
 1f8:	87 b9       	out	0x07, r24	; 7
 1fa:	18 b8       	out	0x08, r1	; 8
	// initialize to 0s

	state = init;
 1fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	tempC = 0x07;
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempC>
    /* Replace with your application code */
    while (1) 
    {
		button_Press();
 206:	53 df       	rcall	.-346    	; 0xae <button_Press>
		PORTC = tempC;
 208:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempC>
 20c:	88 b9       	out	0x08, r24	; 8
 20e:	fb cf       	rjmp	.-10     	; 0x206 <main+0x14>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
